<?xml version="1.0" encoding="utf-8"?>
<CLAS CLSNAME="ZCL_WORD_WRITER" VERSION="1" LANGU="E" DESCRIPT="Excel writer 2007" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_OOXML_WRITER">
 <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
 <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
 <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
 <attribute CLSNAME="ZCL_WORD_WRITER" CMPNAME="C_WORD_DOCUMENT" VERSION="1" LANGU="E" DESCRIPT="wordDocument XML File Name" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;word/document.xml&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_WORD_WRITER" CMPNAME="C_WORD_FONTTABLE" VERSION="1" LANGU="E" DESCRIPT="wordFontTable XML File Name" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;word/fontTable.xml&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_WORD_WRITER" CMPNAME="C_WORD_RELATIONSHIPS" VERSION="1" LANGU="E" DESCRIPT="wordWebSettings XML File Name" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;word/_rels/document.xml.rels&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_WORD_WRITER" CMPNAME="C_WORD_SETTINGS" VERSION="1" LANGU="E" DESCRIPT="wordSettings XML File Name" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;word/settings.xml&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_WORD_WRITER" CMPNAME="C_WORD_STYLES" VERSION="1" LANGU="E" DESCRIPT="wordStyles XML File Name" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;word/styles.xml&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_WORD_WRITER" CMPNAME="C_WORD_STYLESWITHEFFECTS" VERSION="1" LANGU="E" DESCRIPT="wordStylesWithEffects XML File Name" EXPOSURE="1" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;word/stylesWithEffects.xml&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_WORD_WRITER" CMPNAME="C_WORD_THEME" VERSION="1" LANGU="E" DESCRIPT="wordWebSettings XML File Name" EXPOSURE="1" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;word/theme/theme1.xml&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_WORD_WRITER" CMPNAME="C_WORD_WEBSETTINGS" VERSION="1" LANGU="E" DESCRIPT="wordWebSettings XML File Name" EXPOSURE="1" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;word/webSettings.xml&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <inheritance CLSNAME="ZCL_WORD_WRITER" REFCLSNAME="ZCL_OOXML_WRITER" VERSION="1" STATE="1">
  <redefinition CLSNAME="ZCL_WORD_WRITER" REFCLSNAME="ZCL_OOXML_WRITER" VERSION="1" MTDNAME="CREATE" EXPOSURE="1"/>
 </inheritance>
 <method CLSNAME="ZCL_OOXML_WRITER" CMPNAME="CREATE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <source>METHOD create.

  DATA: lo_zip              TYPE REF TO cl_abap_zip.

  DATA: lv_content         TYPE xstring.

  ep_ooxml_document = super-&gt;create( ).

* Gets basic ZIP file and add specific elements
  CREATE OBJECT lo_zip.
  lo_zip-&gt;load( ep_ooxml_document ).

**********************************************************************
* STEP 1: Add word/_rels/document.xml.rels to zip
  lv_content = me-&gt;create_word_relationships( ).
  lo_zip-&gt;add( name    = me-&gt;c_word_relationships
               content = lv_content ).

**********************************************************************
* STEP 2: Add word/theme/theme1.xml to zip
  lv_content = me-&gt;create_word_theme( ).
  lo_zip-&gt;add( name    = me-&gt;c_word_theme
               content = lv_content ).

**********************************************************************
* STEP 3: Add word/document.xml to zip
  lv_content = me-&gt;create_word_document( ).
  lo_zip-&gt;add( name    = me-&gt;c_word_document
               content = lv_content ).

**********************************************************************
* STEP 4: Add word/styles.xml to zip
  lv_content = me-&gt;create_word_styles( ).
  lo_zip-&gt;add( name    = me-&gt;c_word_styles
               content = lv_content ).

**********************************************************************
* STEP 5: Add word/_rels/document.xml.rels to zip
  lv_content = me-&gt;create_word_fonttable( ).
  lo_zip-&gt;add( name    = me-&gt;c_word_fonttable
               content = lv_content ).

**********************************************************************
* STEP 6: Add word/theme/theme1.xml to zip
  lv_content = me-&gt;create_word_settings( ).
  lo_zip-&gt;add( name    = me-&gt;c_word_settings
               content = lv_content ).

**********************************************************************
* STEP 7: Add word/document.xml to zip
  lv_content = me-&gt;create_word_styleswitheffects( ).
  lo_zip-&gt;add( name    = me-&gt;c_word_styleswitheffects
               content = lv_content ).

**********************************************************************
* STEP 8: Add word/styles.xml to zip
  lv_content = me-&gt;create_word_websettings( ).
  lo_zip-&gt;add( name    = me-&gt;c_word_websettings
               content = lv_content ).

  ep_ooxml_document = lo_zip-&gt;save( ).

ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_DOCUMENT" VERSION="1" LANGU="E" DESCRIPT="Create &apos;word/document.xml&apos;" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_DOCUMENT" SCONAME="EP_CONTENT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
  <source>method CREATE_WORD_DOCUMENT.
*
*** Constant node name
*  DATA:       lc_xml_node_workbook            TYPE string VALUE &apos;workbook&apos;,
*              lc_xml_node_fileversion         TYPE string VALUE &apos;fileVersion&apos;,
*              lc_xml_node_workbookpr          TYPE string VALUE &apos;workbookPr&apos;,
*              lc_xml_node_bookviews           TYPE string VALUE &apos;bookViews&apos;,
*              lc_xml_node_workbookview        TYPE string VALUE &apos;workbookView&apos;,
*              lc_xml_node_sheets              TYPE string VALUE &apos;sheets&apos;,
*              lc_xml_node_sheet               TYPE string VALUE &apos;sheet&apos;,
*              lc_xml_node_calcpr              TYPE string VALUE &apos;calcPr&apos;,
*              lc_xml_node_workbookprotection  TYPE string VALUE &apos;workbookProtection&apos;,
*              lc_xml_node_definednames        TYPE string VALUE &apos;definedNames&apos;,
*              lc_xml_node_definedname         TYPE string VALUE &apos;definedName&apos;,
*              &quot; Node attributes
*              lc_xml_attr_appname             TYPE string VALUE &apos;appName&apos;,
*              lc_xml_attr_lastedited          TYPE string VALUE &apos;lastEdited&apos;,
*              lc_xml_attr_lowestedited        TYPE string VALUE &apos;lowestEdited&apos;,
*              lc_xml_attr_rupbuild            TYPE string VALUE &apos;rupBuild&apos;,
*              lc_xml_attr_themeversion        TYPE string VALUE &apos;defaultThemeVersion&apos;,
*              lc_xml_attr_xwindow             TYPE string VALUE &apos;xWindow&apos;,
*              lc_xml_attr_ywindow             TYPE string VALUE &apos;yWindow&apos;,
*              lc_xml_attr_windowwidth         TYPE string VALUE &apos;windowWidth&apos;,
*              lc_xml_attr_windowheight        TYPE string VALUE &apos;windowHeight&apos;,
*              lc_xml_attr_activetab           TYPE string VALUE &apos;activeTab&apos;,
*              lc_xml_attr_name                TYPE string VALUE &apos;name&apos;,
*              lc_xml_attr_sheetid             TYPE string VALUE &apos;sheetId&apos;,
*              lc_xml_attr_state               TYPE string VALUE &apos;state&apos;,
*              lc_xml_attr_id                  TYPE string VALUE &apos;id&apos;,
*              lc_xml_attr_calcid              TYPE string VALUE &apos;calcId&apos;,
*              lc_xml_attr_lockrevision        TYPE string VALUE &apos;lockRevision&apos;,
*              lc_xml_attr_lockstructure       TYPE string VALUE &apos;lockStructure&apos;,
*              lc_xml_attr_lockwindows         TYPE string VALUE &apos;lockWindows&apos;,
*              lc_xml_attr_revisionspassword   TYPE string VALUE &apos;revisionsPassword&apos;,
*              lc_xml_attr_workbookpassword    TYPE string VALUE &apos;workbookPassword&apos;,
*              lc_xml_attr_hidden              TYPE string VALUE &apos;hidden&apos;,
*              lc_xml_attr_localsheetid        TYPE string VALUE &apos;localSheetId&apos;,
*              &quot; Node namespace
*              lc_r_ns                         TYPE string VALUE &apos;r&apos;,
*              lc_xml_node_ns                  TYPE string VALUE &apos;http://schemas.openxmlformats.org/spreadsheetml/2006/main&apos;,
*              lc_xml_node_r_ns                TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships&apos;,
*              &quot; Node id
*              lc_xml_node_ridx_id             TYPE string VALUE &apos;rId#&apos;.
*
*  DATA:       lo_ixml                         TYPE REF TO if_ixml,
*              lo_document                     TYPE REF TO if_ixml_document,
*              lo_element_root                 TYPE REF TO if_ixml_element,
*              lo_element                      TYPE REF TO if_ixml_element,
*              lo_element_range                TYPE REF TO if_ixml_element,
*              lo_sub_element                  TYPE REF TO if_ixml_element,
*              lo_encoding                     TYPE REF TO if_ixml_encoding,
*              lo_streamfactory                TYPE REF TO if_ixml_stream_factory,
*              lo_ostream                      TYPE REF TO if_ixml_ostream,
*              lo_renderer                     TYPE REF TO if_ixml_renderer,
*              lo_iterator                     TYPE REF TO cl_object_collection_iterator,
*              lo_iterator_range               TYPE REF TO cl_object_collection_iterator,
*              lo_worksheet                    TYPE REF TO zcl_excel_worksheet,
*              lo_range                        TYPE REF TO zcl_excel_range,
*              lo_autofilters                  TYPE REF TO zcl_excel_autofilters,
*              lo_autofilter                   TYPE REF TO zcl_excel_autofilter.
*
*  DATA:       lv_xml_node_ridx_id             TYPE string,
*              lv_value                        TYPE string,
*              lv_syindex                      TYPE string,
*              l_guid                          TYPE uuid,
*              lv_active_sheet                 TYPE zexcel_active_worksheet.
*
***********************************************************************
** STEP 1: Create [Content_Types].xml into the root of the ZIP
*  lo_ixml = cl_ixml=&gt;create( ).
*
***********************************************************************
** STEP 2: Set document attributes
*  lo_encoding = lo_ixml-&gt;create_encoding( byte_order = if_ixml_encoding=&gt;co_platform_endian
*                                          character_set = &apos;utf-8&apos; ).
*  lo_document = lo_ixml-&gt;create_document( ).
*  lo_document-&gt;set_encoding( lo_encoding ).
*  lo_document-&gt;set_standalone( abap_true ).
*
***********************************************************************
** STEP 3: Create main node
*  lo_element_root  = lo_document-&gt;create_simple_element( name   = lc_xml_node_workbook
*                                                         parent = lo_document ).
*  lo_element_root-&gt;set_attribute_ns( name  = &apos;xmlns&apos;
*                                     value = lc_xml_node_ns ).
*  lo_element_root-&gt;set_attribute_ns( name  = &apos;xmlns:r&apos;
*                                     value = lc_xml_node_r_ns ).
*
***********************************************************************
** STEP 4: Create subnode
*  &quot; fileVersion node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_fileversion
*                                                   parent = lo_document ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_appname
*                                value = &apos;xl&apos; ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_lastedited
*                                value = &apos;4&apos; ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_lowestedited
*                                value = &apos;4&apos; ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_rupbuild
*                                value = &apos;4506&apos; ).
*  lo_element_root-&gt;append_child( new_child = lo_element ).
*
*  &quot; fileVersion node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_workbookpr
*                                                   parent = lo_document ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_themeversion
*                                value = &apos;124226&apos; ).
*  lo_element_root-&gt;append_child( new_child = lo_element ).
*
*  &quot; workbookProtection node
*  IF me-&gt;excel-&gt;zif_excel_book_protection~protected EQ abap_true.
*    lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_workbookprotection
*                                                     parent = lo_document ).
*    MOVE me-&gt;excel-&gt;zif_excel_book_protection~workbookpassword TO lv_value.
*    IF lv_value IS NOT INITIAL.
*      lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_workbookpassword
*                                    value = lv_value ).
*    ENDIF.
*    MOVE me-&gt;excel-&gt;zif_excel_book_protection~revisionspassword TO lv_value.
*    IF lv_value IS NOT INITIAL.
*      lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_revisionspassword
*                                    value = lv_value ).
*    ENDIF.
*    MOVE me-&gt;excel-&gt;zif_excel_book_protection~lockrevision TO lv_value.
*    CONDENSE lv_value NO-GAPS.
*    lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_lockrevision
*                                  value = lv_value ).
*    MOVE me-&gt;excel-&gt;zif_excel_book_protection~lockstructure TO lv_value.
*    CONDENSE lv_value NO-GAPS.
*    lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_lockstructure
*                                  value = lv_value ).
*    MOVE me-&gt;excel-&gt;zif_excel_book_protection~lockwindows TO lv_value.
*    CONDENSE lv_value NO-GAPS.
*    lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_lockwindows
*                                  value = lv_value ).
*    lo_element_root-&gt;append_child( new_child = lo_element ).
*  ENDIF.
*
*  &quot; bookviews node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_bookviews
*                                                   parent = lo_document ).
*  &quot; bookview node
*  lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_workbookview
*                                                       parent = lo_document ).
*  lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_xwindow
*                                    value = &apos;120&apos; ).
*  lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_ywindow
*                                    value = &apos;120&apos; ).
*  lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_windowwidth
*                                    value = &apos;19035&apos; ).
*  lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_windowheight
*                                    value = &apos;8445&apos; ).
*  &quot; Set Active Sheet
*  lv_active_sheet = excel-&gt;get_active_sheet_index( ).
*  IF lv_active_sheet &gt; 1.
*    lv_active_sheet = lv_active_sheet - 1.
*    lv_value = lv_active_sheet.
*    CONDENSE lv_value.
*    lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_activetab
*                                      value = lv_value ).
*  ENDIF.
*  lo_element-&gt;append_child( new_child = lo_sub_element ).&quot; bookview node
*  lo_element_root-&gt;append_child( new_child = lo_element ).&quot; bookviews node
*
*  &quot; sheets node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_sheets
*                                                   parent = lo_document ).
*  lo_iterator = excel-&gt;get_worksheets_iterator( ).
*
*  &quot; ranges node
*  lo_element_range = lo_document-&gt;create_simple_element( name   = lc_xml_node_definednames &quot; issue 163 +
*                                                         parent = lo_document ).           &quot; issue 163 +
*
*  WHILE lo_iterator-&gt;if_object_collection_iterator~has_next( ) EQ abap_true.
*    &quot; sheet node
*    lo_sub_element = lo_document-&gt;create_simple_element_ns( name   = lc_xml_node_sheet
*                                                            parent = lo_document ).
*    lo_worksheet ?= lo_iterator-&gt;if_object_collection_iterator~get_next( ).
*    lv_syindex = sy-index.                                                                  &quot; question by Stefan Schmöcker 2012-12-02:  sy-index seems to do the job - but is it proven to work or purely coincedence
*    lv_value = lo_worksheet-&gt;get_title( ).
*    SHIFT lv_syindex RIGHT DELETING TRAILING space.
*    SHIFT lv_syindex LEFT DELETING LEADING space.
*    lv_xml_node_ridx_id = lc_xml_node_ridx_id.
*    REPLACE ALL OCCURRENCES OF &apos;#&apos; IN lv_xml_node_ridx_id WITH lv_syindex.
*    lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_name
*                                      value = lv_value ).
*    lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_sheetid
*                                      value = lv_syindex ).
*    IF lo_worksheet-&gt;zif_excel_sheet_properties~hidden EQ zif_excel_sheet_properties=&gt;c_hidden.
*      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_state
*                                        value = &apos;hidden&apos; ).
*    ELSEIF lo_worksheet-&gt;zif_excel_sheet_properties~hidden EQ zif_excel_sheet_properties=&gt;c_veryhidden.
*      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_state
*                                        value = &apos;veryHidden&apos; ).
*    ENDIF.
*    lo_sub_element-&gt;set_attribute_ns( name    = lc_xml_attr_id
*                                      prefix  = lc_r_ns
*                                      value   = lv_xml_node_ridx_id ).
*    lo_element-&gt;append_child( new_child = lo_sub_element ). &quot; sheet node
*
*    &quot; issue 163 &gt;&gt;&gt;
*    lo_iterator_range = lo_worksheet-&gt;get_ranges_iterator( ).
*
**--------------------------------------------------------------------*
** Defined names sheetlocal:  Ranges, Repeat rows and columns
**--------------------------------------------------------------------*
*    WHILE lo_iterator_range-&gt;if_object_collection_iterator~has_next( ) EQ abap_true.
*      &quot; range node
*      lo_sub_element = lo_document-&gt;create_simple_element_ns( name   = lc_xml_node_definedname
*                                                              parent = lo_document ).
*      lo_range ?= lo_iterator_range-&gt;if_object_collection_iterator~get_next( ).
*      lv_value = lo_range-&gt;name.
*
*      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_name
*                                        value = lv_value ).
*
**      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_localsheetid           &quot;del #235 Repeat rows/cols - EXCEL starts couting from zero
**                                        value = lv_xml_node_ridx_id ).             &quot;del #235 Repeat rows/cols - and needs absolute referencing to localSheetId
*      lv_value   = lv_syindex - 1.                                                  &quot;ins #235 Repeat rows/cols
*      CONDENSE lv_value NO-GAPS.                                                    &quot;ins #235 Repeat rows/cols
*      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_localsheetid
*                                        value = lv_value ).
*
*      lv_value = lo_range-&gt;get_value( ).
*      lo_sub_element-&gt;set_value( value = lv_value ).
*      lo_element_range-&gt;append_child( new_child = lo_sub_element ). &quot; range node
*
*    ENDWHILE.
*    &quot; issue 163 &lt;&lt;&lt;
*
*  ENDWHILE.
*  lo_element_root-&gt;append_child( new_child = lo_element ).&quot; sheets node
*
*
**--------------------------------------------------------------------*
** Defined names workbookgolbal:  Ranges
**--------------------------------------------------------------------*
**  &quot; ranges node
**  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_definednames &quot; issue 163 -
**                                                   parent = lo_document ).           &quot; issue 163 -
*  lo_iterator = excel-&gt;get_ranges_iterator( ).
*
*  WHILE lo_iterator-&gt;if_object_collection_iterator~has_next( ) EQ abap_true.
*    &quot; range node
*    lo_sub_element = lo_document-&gt;create_simple_element_ns( name   = lc_xml_node_definedname
*                                                            parent = lo_document ).
*    lo_range ?= lo_iterator-&gt;if_object_collection_iterator~get_next( ).
*    lv_value = lo_range-&gt;name.
*    lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_name
*                                      value = lv_value ).
*    lv_value = lo_range-&gt;get_value( ).
*    lo_sub_element-&gt;set_value( value = lv_value ).
*    lo_element_range-&gt;append_child( new_child = lo_sub_element ). &quot; range node
*
*  ENDWHILE.
*
**--------------------------------------------------------------------*
** Defined names - Autofilters ( also sheetlocal )
**--------------------------------------------------------------------*
*  lo_autofilters = excel-&gt;get_autofilters_reference( ).
*  IF lo_autofilters-&gt;is_empty( ) = abap_false.
*    lo_iterator = excel-&gt;get_worksheets_iterator( ).
*    WHILE lo_iterator-&gt;if_object_collection_iterator~has_next( ) EQ abap_true.
*
*      lo_worksheet ?= lo_iterator-&gt;if_object_collection_iterator~get_next( ).
*      lv_syindex = sy-index - 1 .
*      l_guid = lo_worksheet-&gt;get_guid( ).
*      lo_autofilter = lo_autofilters-&gt;get( i_sheet_guid = l_guid ) .
*      IF lo_autofilter IS BOUND.
*        lo_sub_element = lo_document-&gt;create_simple_element_ns( name   = lc_xml_node_definedname
*                                                                parent = lo_document ).
*        lv_value = lo_autofilters-&gt;c_autofilter.
*        lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_name
*                                          value = lv_value ).
*        lv_value = lv_syindex.
*        CONDENSE lv_value NO-GAPS.
*        lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_localsheetid
*                                          value = lv_value ).
*        lv_value = &apos;1&apos;. &quot; Always hidden
*        lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_hidden
*                                          value = lv_value ).
*        lv_value = lo_autofilter-&gt;get_filter_reference( ).
*        lo_sub_element-&gt;set_value( value = lv_value ).
*        lo_element_range-&gt;append_child( new_child = lo_sub_element ). &quot; range node
*      ENDIF.
*
*    ENDWHILE.
*  ENDIF.
*  lo_element_root-&gt;append_child( new_child = lo_element_range ).                      &quot; ranges node
*
*
*  &quot; calcPr node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_calcpr
*                                                   parent = lo_document ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_calcid
*                                value = &apos;125725&apos; ).
*  lo_element_root-&gt;append_child( new_child = lo_element ).
*
***********************************************************************
** STEP 5: Create xstring stream
*  lo_streamfactory = lo_ixml-&gt;create_stream_factory( ).
*  lo_ostream = lo_streamfactory-&gt;create_ostream_xstring( string = ep_content ).
*  lo_renderer = lo_ixml-&gt;create_renderer( ostream  = lo_ostream document = lo_document ).
*  lo_renderer-&gt;render( ).

endmethod.</source>
 </method>
 <method CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_FONTTABLE" VERSION="1" LANGU="E" DESCRIPT="Create &apos;word/fontTable.xml&apos;" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_FONTTABLE" SCONAME="EP_CONTENT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
  <source>method CREATE_WORD_FONTTABLE.

endmethod.</source>
 </method>
 <method CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_RELATIONSHIPS" VERSION="1" LANGU="E" DESCRIPT="Create &apos;word/_rels/document.xml.rels&apos;" EXPOSURE="1" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_RELATIONSHIPS" SCONAME="EP_CONTENT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
  <source>method CREATE_WORD_RELATIONSHIPS.
*
*
*** Constant node name
*  DATA: lc_xml_node_relationships TYPE string VALUE &apos;Relationships&apos;,
*        lc_xml_node_relationship  TYPE string VALUE &apos;Relationship&apos;,
*        &quot; Node attributes
*        lc_xml_attr_id            TYPE string VALUE &apos;Id&apos;,
*        lc_xml_attr_type          TYPE string VALUE &apos;Type&apos;,
*        lc_xml_attr_target        TYPE string VALUE &apos;Target&apos;,
*        &quot; Node namespace
*        lc_xml_node_rels_ns       TYPE string VALUE &apos;http://schemas.openxmlformats.org/package/2006/relationships&apos;,
*        &quot; Node id
*        lc_xml_node_ridx_id       TYPE string VALUE &apos;rId#&apos;,
*        &quot; Node type
*        lc_xml_node_rid_sheet_tp      TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet&apos;,
*        lc_xml_node_rid_theme_tp      TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme&apos;,
*        lc_xml_node_rid_styles_tp     TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles&apos;,
*        lc_xml_node_rid_shared_tp     TYPE string VALUE &apos;http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings&apos;,
*        &quot; Node target
*        lc_xml_node_ridx_tg           TYPE string VALUE &apos;worksheets/sheet#.xml&apos;,
*        lc_xml_node_rid_shared_tg     TYPE string VALUE &apos;sharedStrings.xml&apos;,
*        lc_xml_node_rid_styles_tg     TYPE string VALUE &apos;styles.xml&apos;,
*        lc_xml_node_rid_theme_tg      TYPE string VALUE &apos;theme/theme1.xml&apos;.
*
*  DATA: lo_ixml           TYPE REF TO if_ixml,
*        lo_document       TYPE REF TO if_ixml_document,
*        lo_element_root   TYPE REF TO if_ixml_element,
*        lo_element        TYPE REF TO if_ixml_element,
*        lo_encoding       TYPE REF TO if_ixml_encoding,
*        lo_streamfactory  TYPE REF TO if_ixml_stream_factory,
*        lo_ostream        TYPE REF TO if_ixml_ostream,
*        lo_renderer       TYPE REF TO if_ixml_renderer.
*
*  DATA: lv_xml_node_ridx_tg       TYPE string,
*        lv_xml_node_ridx_id       TYPE string,
*        lv_size                   TYPE i,
*        lv_syindex(3)             TYPE c.
*
***********************************************************************
** STEP 1: Create [Content_Types].xml into the root of the ZIP
*  lo_ixml = cl_ixml=&gt;create( ).
*
***********************************************************************
** STEP 2: Set document attributes
*  lo_encoding = lo_ixml-&gt;create_encoding( byte_order = if_ixml_encoding=&gt;co_platform_endian
*                                          character_set = &apos;utf-8&apos; ).
*  lo_document = lo_ixml-&gt;create_document( ).
*  lo_document-&gt;set_encoding( lo_encoding ).
*  lo_document-&gt;set_standalone( abap_true ).
*
***********************************************************************
** STEP 3: Create main node relationships
*  lo_element_root  = lo_document-&gt;create_simple_element( name   = lc_xml_node_relationships
*                                                         parent = lo_document ).
*  lo_element_root-&gt;set_attribute_ns( name  = &apos;xmlns&apos;
*                                     value = lc_xml_node_rels_ns ).
*
***********************************************************************
** STEP 4: Create subnodes
*
*  lv_size = excel-&gt;get_worksheets_size( ).
*
*  &quot; Relationship node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_relationship
*                                                   parent = lo_document ).
*  lv_size = lv_size + 2.
*  lv_syindex = lv_size.
*  SHIFT lv_syindex RIGHT DELETING TRAILING space.
*  SHIFT lv_syindex LEFT DELETING LEADING space.
*  lv_xml_node_ridx_id = lc_xml_node_ridx_id.
*  REPLACE ALL OCCURRENCES OF &apos;#&apos; IN lv_xml_node_ridx_id WITH lv_syindex.
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_id
*                                value = lv_xml_node_ridx_id ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_type
*                                value = lc_xml_node_rid_styles_tp ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_target
*                                value = lc_xml_node_rid_styles_tg ).
*  lo_element_root-&gt;append_child( new_child = lo_element ).
*
*
*  &quot; Relationship node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_relationship
*                                                  parent = lo_document ).
*  lv_size = lv_size - 1.
*  lv_syindex = lv_size.
*  SHIFT lv_syindex RIGHT DELETING TRAILING space.
*  SHIFT lv_syindex LEFT DELETING LEADING space.
*  lv_xml_node_ridx_id = lc_xml_node_ridx_id.
*  REPLACE ALL OCCURRENCES OF &apos;#&apos; IN lv_xml_node_ridx_id WITH lv_syindex.
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_id
*                                value = lv_xml_node_ridx_id ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_type
*                                value = lc_xml_node_rid_theme_tp ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_target
*                                value = lc_xml_node_rid_theme_tg ).
*  lo_element_root-&gt;append_child( new_child = lo_element ).
*
*  lv_size = excel-&gt;get_worksheets_size( ).
*
*  DO lv_size TIMES.
*    &quot; Relationship node
*    lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_relationship
*    parent = lo_document ).
*    lv_xml_node_ridx_id = lc_xml_node_ridx_id.
*    lv_xml_node_ridx_tg = lc_xml_node_ridx_tg.
*    lv_syindex = sy-index.
*    SHIFT lv_syindex RIGHT DELETING TRAILING space.
*    SHIFT lv_syindex LEFT DELETING LEADING space.
*    REPLACE ALL OCCURRENCES OF &apos;#&apos; IN lv_xml_node_ridx_id WITH lv_syindex.
*    REPLACE ALL OCCURRENCES OF &apos;#&apos; IN lv_xml_node_ridx_tg WITH lv_syindex.
*    lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_id
*    value = lv_xml_node_ridx_id ).
*    lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_type
*    value = lc_xml_node_rid_sheet_tp ).
*    lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_target
*    value = lv_xml_node_ridx_tg ).
*    lo_element_root-&gt;append_child( new_child = lo_element ).
*  ENDDO.
*
*  &quot; Relationship node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_relationship
*                                                   parent = lo_document ).
*  ADD 3 TO lv_size.
*  lv_syindex = lv_size.
*  SHIFT lv_syindex RIGHT DELETING TRAILING space.
*  SHIFT lv_syindex LEFT DELETING LEADING space.
*  lv_xml_node_ridx_id = lc_xml_node_ridx_id.
*  REPLACE ALL OCCURRENCES OF &apos;#&apos; IN lv_xml_node_ridx_id WITH lv_syindex.
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_id
*                                value = lv_xml_node_ridx_id ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_type
*                                value = lc_xml_node_rid_shared_tp ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_target
*                                value = lc_xml_node_rid_shared_tg ).
*  lo_element_root-&gt;append_child( new_child = lo_element ).
*
***********************************************************************
** STEP 5: Create xstring stream
*  lo_streamfactory = lo_ixml-&gt;create_stream_factory( ).
*  lo_ostream = lo_streamfactory-&gt;create_ostream_xstring( string = ep_content ).
*  lo_renderer = lo_ixml-&gt;create_renderer( ostream  = lo_ostream document = lo_document ).
*  lo_renderer-&gt;render( ).

endmethod.</source>
 </method>
 <method CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_SETTINGS" VERSION="1" LANGU="E" DESCRIPT="Create &apos;word/settings.xml&apos;" EXPOSURE="1" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_SETTINGS" SCONAME="EP_CONTENT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
  <source>method CREATE_WORD_SETTINGS.


endmethod.</source>
 </method>
 <method CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_STYLES" VERSION="1" LANGU="E" DESCRIPT="Create &apos;word/styles.xml&apos;" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_STYLES" SCONAME="EP_CONTENT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
  <source>method CREATE_WORD_STYLES.
*
*
*** Constant node name
*  CONSTANTS:  lc_xml_node_stylesheet    TYPE string VALUE &apos;styleSheet&apos;,
*              &quot; font
*              lc_xml_node_fonts         TYPE string VALUE &apos;fonts&apos;,
*              lc_xml_node_font          TYPE string VALUE &apos;font&apos;,
*              lc_xml_node_b             TYPE string VALUE &apos;b&apos;,            &quot;bold
*              lc_xml_node_i             TYPE string VALUE &apos;i&apos;,            &quot;italic
*              lc_xml_node_u             TYPE string VALUE &apos;u&apos;,            &quot;underline
*              lc_xml_node_strike        TYPE string VALUE &apos;strike&apos;,       &quot;strikethrough
*              lc_xml_node_sz            TYPE string VALUE &apos;sz&apos;,
*              lc_xml_node_color         TYPE string VALUE &apos;color&apos;,
*              lc_xml_node_name          TYPE string VALUE &apos;name&apos;,
*              lc_xml_node_family        TYPE string VALUE &apos;family&apos;,
*              lc_xml_node_scheme        TYPE string VALUE &apos;scheme&apos;,
*              &quot; fill
*              lc_xml_node_fills         TYPE string VALUE &apos;fills&apos;,
*              lc_xml_node_fill          TYPE string VALUE &apos;fill&apos;,
*              lc_xml_node_patternfill   TYPE string VALUE &apos;patternFill&apos;,
*              lc_xml_node_fgcolor       TYPE string VALUE &apos;fgColor&apos;,
*              lc_xml_node_bgcolor       TYPE string VALUE &apos;bgColor&apos;,
*              lc_xml_node_gradientfill  TYPE string VALUE &apos;gradientFill&apos;,
*              lc_xml_node_stop          TYPE string VALUE &apos;stop&apos;,
*              &quot; borders
*              lc_xml_node_borders       TYPE string VALUE &apos;borders&apos;,
*              lc_xml_node_border        TYPE string VALUE &apos;border&apos;,
*              lc_xml_node_left          TYPE string VALUE &apos;left&apos;,
*              lc_xml_node_right         TYPE string VALUE &apos;right&apos;,
*              lc_xml_node_top           TYPE string VALUE &apos;top&apos;,
*              lc_xml_node_bottom        TYPE string VALUE &apos;bottom&apos;,
*              lc_xml_node_diagonal      TYPE string VALUE &apos;diagonal&apos;,
*              &quot; numfmt
*              lc_xml_node_numfmts       TYPE string VALUE &apos;numFmts&apos;,
*              lc_xml_node_numfmt        TYPE string VALUE &apos;numFmt&apos;,
*              &quot; Styles
*              lc_xml_node_cellstylexfs  TYPE string VALUE &apos;cellStyleXfs&apos;,
*              lc_xml_node_xf            TYPE string VALUE &apos;xf&apos;,
*              lc_xml_node_cellxfs       TYPE string VALUE &apos;cellXfs&apos;,
*              lc_xml_node_cellstyles    TYPE string VALUE &apos;cellStyles&apos;,
*              lc_xml_node_cellstyle     TYPE string VALUE &apos;cellStyle&apos;,
*              lc_xml_node_dxfs          TYPE string VALUE &apos;dxfs&apos;,
*              lc_xml_node_dxf           TYPE string VALUE &apos;dxf&apos;,
*              lc_xml_node_tablestyles   TYPE string VALUE &apos;tableStyles&apos;,
*              &quot; Colors
*              lc_xml_node_colors        TYPE string VALUE &apos;colors&apos;,
*              lc_xml_node_indexedcolors TYPE string VALUE &apos;indexedColors&apos;,
*              lc_xml_node_rgbcolor      TYPE string VALUE &apos;rgbColor&apos;,
*              lc_xml_node_mrucolors     TYPE string VALUE &apos;mruColors&apos;,
*              &quot; Alignment
*              lc_xml_node_alignment     TYPE string VALUE &apos;alignment&apos;,
*              &quot; Protection
*              lc_xml_node_protection     TYPE string VALUE &apos;protection&apos;,
*              &quot; Node attributes
*              lc_xml_attr_count             TYPE string VALUE &apos;count&apos;,
*              lc_xml_attr_val               TYPE string VALUE &apos;val&apos;,
*              lc_xml_attr_theme             TYPE string VALUE &apos;theme&apos;,
*              lc_xml_attr_rgb               TYPE string VALUE &apos;rgb&apos;,
*              lc_xml_attr_indexed           TYPE string VALUE &apos;indexed&apos;,
*              lc_xml_attr_tint              TYPE string VALUE &apos;tint&apos;,
*              lc_xml_attr_style             TYPE string VALUE &apos;style&apos;,
*              lc_xml_attr_position          TYPE string VALUE &apos;position&apos;,
*              lc_xml_attr_degree            TYPE string VALUE &apos;degree&apos;,
*              lc_xml_attr_patterntype       TYPE string VALUE &apos;patternType&apos;,
*              lc_xml_attr_numfmtid          TYPE string VALUE &apos;numFmtId&apos;,
*              lc_xml_attr_fontid            TYPE string VALUE &apos;fontId&apos;,
*              lc_xml_attr_fillid            TYPE string VALUE &apos;fillId&apos;,
*              lc_xml_attr_borderid          TYPE string VALUE &apos;borderId&apos;,
*              lc_xml_attr_xfid              TYPE string VALUE &apos;xfId&apos;,
*              lc_xml_attr_applynumberformat TYPE string VALUE &apos;applyNumberFormat&apos;,
*              lc_xml_attr_applyprotection   TYPE string VALUE &apos;applyProtection&apos;,
*              lc_xml_attr_applyfont         TYPE string VALUE &apos;applyFont&apos;,
*              lc_xml_attr_applyfill         TYPE string VALUE &apos;applyFill&apos;,
*              lc_xml_attr_applyborder       TYPE string VALUE &apos;applyBorder&apos;,
*              lc_xml_attr_name              TYPE string VALUE &apos;name&apos;,
*              lc_xml_attr_builtinid         TYPE string VALUE &apos;builtinId&apos;,
*              lc_xml_attr_defaulttablestyle TYPE string VALUE &apos;defaultTableStyle&apos;,
*              lc_xml_attr_defaultpivotstyle TYPE string VALUE &apos;defaultPivotStyle&apos;,
*              lc_xml_attr_applyalignment    TYPE string VALUE &apos;applyAlignment&apos;,
*              lc_xml_attr_horizontal        TYPE string VALUE &apos;horizontal&apos;,
*              lc_xml_attr_formatcode        TYPE string VALUE &apos;formatCode&apos;,
*              lc_xml_attr_vertical          TYPE string VALUE &apos;vertical&apos;,
*              lc_xml_attr_wraptext          TYPE string VALUE &apos;wrapText&apos;,
*              lc_xml_attr_textrotation      TYPE string VALUE &apos;textRotation&apos;,
*              lc_xml_attr_shrinktofit       TYPE string VALUE &apos;shrinkToFit&apos;,
*              lc_xml_attr_indent            TYPE string VALUE &apos;indent&apos;,
*              lc_xml_attr_locked            TYPE string VALUE &apos;locked&apos;,
*              lc_xml_attr_hidden            TYPE string VALUE &apos;hidden&apos;,
*              lc_xml_attr_diagonalup        TYPE string VALUE &apos;diagonalUp&apos;,
*              lc_xml_attr_diagonaldown      TYPE string VALUE &apos;diagonalDown&apos;,
*              &quot; Node namespace
*              lc_xml_node_ns                TYPE string VALUE &apos;http://schemas.openxmlformats.org/spreadsheetml/2006/main&apos;.
*
*  DATA: lo_ixml             TYPE REF TO if_ixml,
*        lo_document         TYPE REF TO if_ixml_document,
*        lo_element_root     TYPE REF TO if_ixml_element,
*        lo_element_fonts    TYPE REF TO if_ixml_element,
*        lo_element_font     TYPE REF TO if_ixml_element,
*        lo_element_fills    TYPE REF TO if_ixml_element,
*        lo_element_fill     TYPE REF TO if_ixml_element,
*        lo_element_borders  TYPE REF TO if_ixml_element,
*        lo_element_border   TYPE REF TO if_ixml_element,
*        lo_element_numfmts  TYPE REF TO if_ixml_element,
*        lo_element_numfmt   TYPE REF TO if_ixml_element,
*        lo_element_cellxfs  TYPE REF TO if_ixml_element,
*        lo_element          TYPE REF TO if_ixml_element,
*        lo_sub_element      TYPE REF TO if_ixml_element,
*        lo_sub_element_2    TYPE REF TO if_ixml_element,
*        lo_encoding         TYPE REF TO if_ixml_encoding,
*        lo_streamfactory    TYPE REF TO if_ixml_stream_factory,
*        lo_ostream          TYPE REF TO if_ixml_ostream,
*        lo_renderer         TYPE REF TO if_ixml_renderer,
*        lo_iterator         TYPE REF TO cl_object_collection_iterator,
*        lo_iterator2        TYPE REF TO cl_object_collection_iterator,
*        lo_worksheet        TYPE REF TO zcl_excel_worksheet,
*        lo_style_conditional TYPE REF TO zcl_excel_style_conditional,
*        lo_style            TYPE REF TO zcl_excel_style.
*
*
*  DATA: lt_fonts          TYPE zexcel_t_style_font,
*        ls_font           TYPE zexcel_s_style_font,
*        lt_fills          TYPE zexcel_t_style_fill,
*        ls_fill           TYPE zexcel_s_style_fill,
*        lt_borders        TYPE zexcel_t_style_border,
*        ls_border         TYPE zexcel_s_style_border,
*        lt_numfmts        TYPE zexcel_t_style_numfmt,
*        ls_numfmt         TYPE zexcel_s_style_numfmt,
*        lt_protections    TYPE zexcel_t_style_protection,
*        ls_protection     TYPE zexcel_s_style_protection,
*        lt_alignments     TYPE zexcel_t_style_alignment,
*        ls_alignment      TYPE zexcel_s_style_alignment,
*        lt_cellxfs        TYPE zexcel_t_cellxfs,
*        ls_cellxfs        TYPE zexcel_s_cellxfs,
*        ls_styles_mapping TYPE zexcel_s_styles_mapping,
*        ls_style_cond_mapping TYPE zexcel_s_styles_cond_mapping,
*        ls_cellis         TYPE zexcel_conditional_cellis,
*        ls_expression     TYPE zexcel_conditional_expression,
*        lt_colors         TYPE zexcel_t_style_color_argb,
*        ls_color          LIKE LINE OF lt_colors.
*
*  DATA: lv_value          TYPE string,
*        lv_dfx_count      TYPE i,
*        lv_fonts_count    TYPE i,
*        lv_fills_count    TYPE i,
*        lv_borders_count  TYPE i,
*        lv_cellxfs_count  TYPE i,
*        lv_align_flag     TYPE c.
*
***********************************************************************
** STEP 1: Create [Content_Types].xml into the root of the ZIP
*  lo_ixml = cl_ixml=&gt;create( ).
*
***********************************************************************
** STEP 2: Set document attributes
*  lo_encoding = lo_ixml-&gt;create_encoding( byte_order = if_ixml_encoding=&gt;co_platform_endian
*                                          character_set = &apos;utf-8&apos; ).
*  lo_document = lo_ixml-&gt;create_document( ).
*  lo_document-&gt;set_encoding( lo_encoding ).
*  lo_document-&gt;set_standalone( abap_true ).
*
************************************************************************
** STEP 3: Create main node relationships
*  lo_element_root  = lo_document-&gt;create_simple_element( name   = lc_xml_node_stylesheet
*                                                         parent = lo_document ).
*  lo_element_root-&gt;set_attribute_ns( name  = &apos;xmlns&apos;
*                                     value = lc_xml_node_ns ).
*
***********************************************************************
** STEP 4: Create subnodes
*
*  lo_element_fonts = lo_document-&gt;create_simple_element( name   = lc_xml_node_fonts
*                                                         parent = lo_document ).
*
*  lo_element_fills = lo_document-&gt;create_simple_element( name   = lc_xml_node_fills
*                                                         parent = lo_document ).
*
*  lo_element_borders = lo_document-&gt;create_simple_element( name   = lc_xml_node_borders
*                                                           parent = lo_document ).
*
*  lo_element_cellxfs = lo_document-&gt;create_simple_element( name   = lc_xml_node_cellxfs
*                                                           parent = lo_document ).
*
*  lo_element_numfmts = lo_document-&gt;create_simple_element( name   = lc_xml_node_numfmts
*                                                           parent = lo_document ).
*
*
** Compress styles
*  lo_iterator = excel-&gt;get_styles_iterator( ).
*  WHILE lo_iterator-&gt;if_object_collection_iterator~has_next( ) EQ abap_true.
*    lo_style ?= lo_iterator-&gt;if_object_collection_iterator~get_next( ).
*    ls_font       = lo_style-&gt;font-&gt;get_structure( ).
*    ls_fill       = lo_style-&gt;fill-&gt;get_structure( ).
*    ls_border     = lo_style-&gt;borders-&gt;get_structure( ).
*    ls_alignment  = lo_style-&gt;alignment-&gt;get_structure( ).
*    ls_protection = lo_style-&gt;protection-&gt;get_structure( ).
*    ls_numfmt     = lo_style-&gt;number_format-&gt;get_structure( ).
*
*    CLEAR ls_cellxfs.
*
*
** Compress fonts
*    READ TABLE lt_fonts FROM ls_font TRANSPORTING NO FIELDS.
*    IF sy-subrc EQ 0.
*      ls_cellxfs-fontid = sy-tabix.
*    ELSE.
*      APPEND ls_font TO lt_fonts.
*      DESCRIBE TABLE lt_fonts LINES ls_cellxfs-fontid.
*    ENDIF.
*    SUBTRACT 1 FROM ls_cellxfs-fontid.
*
** Compress alignment
*    READ TABLE lt_alignments FROM ls_alignment TRANSPORTING NO FIELDS.
*    IF sy-subrc EQ 0.
*      ls_cellxfs-alignmentid = sy-tabix.
*    ELSE.
*      APPEND ls_alignment TO lt_alignments.
*      DESCRIBE TABLE lt_alignments LINES ls_cellxfs-alignmentid.
*    ENDIF.
*    SUBTRACT 1 FROM ls_cellxfs-alignmentid.
*
** Compress fills
*    READ TABLE lt_fills FROM ls_fill TRANSPORTING NO FIELDS.
*    IF sy-subrc EQ 0.
*      ls_cellxfs-fillid = sy-tabix.
*    ELSE.
*      APPEND ls_fill TO lt_fills.
*      DESCRIBE TABLE lt_fills LINES ls_cellxfs-fillid.
*    ENDIF.
*    SUBTRACT 1 FROM ls_cellxfs-fillid.
*
** Compress borders
*    READ TABLE lt_borders FROM ls_border TRANSPORTING NO FIELDS.
*    IF sy-subrc EQ 0.
*      ls_cellxfs-borderid = sy-tabix.
*    ELSE.
*      APPEND ls_border TO lt_borders.
*      DESCRIBE TABLE lt_borders LINES ls_cellxfs-borderid.
*    ENDIF.
*    SUBTRACT 1 FROM ls_cellxfs-borderid.
*
** Compress protection
*    IF ls_protection-locked EQ c_on AND ls_protection-hidden EQ c_off.
*      ls_cellxfs-applyprotection    = 0.
*    ELSE.
*      READ TABLE lt_protections FROM ls_protection TRANSPORTING NO FIELDS.
*      IF sy-subrc EQ 0.
*        ls_cellxfs-protectionid = sy-tabix.
*      ELSE.
*        APPEND ls_protection TO lt_protections.
*        DESCRIBE TABLE lt_protections LINES ls_cellxfs-protectionid.
*      ENDIF.
*      ls_cellxfs-applyprotection    = 1.
*    ENDIF.
*    SUBTRACT 1 FROM ls_cellxfs-protectionid.
*
** Compress number formats
*
*    &quot;-----------
*    IF ls_numfmt-numfmt NE zcl_excel_style_number_format=&gt;c_format_date_std.&quot; and ls_numfmt-NUMFMT ne &apos;STD_NDEC&apos;. &quot; ALE Changes on going
*      &quot;---
*      IF ls_numfmt IS NOT INITIAL.
*
*        READ TABLE lt_numfmts FROM ls_numfmt TRANSPORTING NO FIELDS.
*        IF sy-subrc EQ 0.
*          ls_cellxfs-numfmtid = sy-tabix.
*        ELSE.
*          APPEND ls_numfmt TO lt_numfmts.
*          DESCRIBE TABLE lt_numfmts LINES ls_cellxfs-numfmtid.
*        ENDIF.
*        ADD zcl_excel_common=&gt;c_excel_numfmt_offset TO ls_cellxfs-numfmtid. &quot; Add OXML offset for custom styles
*        ls_cellxfs-applynumberformat    = 1.
*      ELSE.
*        ls_cellxfs-applynumberformat    = 0.
*      ENDIF.
*      &quot;----------- &quot; ALE changes on going
*    ELSE.
*      ls_cellxfs-applynumberformat    = 1.
*      IF ls_numfmt-numfmt EQ zcl_excel_style_number_format=&gt;c_format_date_std.
*        ls_cellxfs-numfmtid = 14.
**      elseif ls_numfmt-NUMFMT eq &apos;STD_NDEC&apos;.
**        ls_cellxfs-numfmtid = 2.
*      ENDIF.
*    ENDIF.
*    &quot;---
*
*    IF ls_cellxfs-fontid NE 0.
*      ls_cellxfs-applyfont    = 1.
*    ELSE.
*      ls_cellxfs-applyfont    = 0.
*    ENDIF.
*    IF ls_cellxfs-alignmentid NE 0.
*      ls_cellxfs-applyalignment = 1.
*    ELSE.
*      ls_cellxfs-applyalignment = 0.
*    ENDIF.
*    IF ls_cellxfs-fillid NE 0.
*      ls_cellxfs-applyfill    = 1.
*    ELSE.
*      ls_cellxfs-applyfill    = 0.
*    ENDIF.
*    IF ls_cellxfs-borderid NE 0.
*      ls_cellxfs-applyborder    = 1.
*    ELSE.
*      ls_cellxfs-applyborder    = 0.
*    ENDIF.
*
** Remap styles
*    READ TABLE lt_cellxfs FROM ls_cellxfs TRANSPORTING NO FIELDS.
*    IF sy-subrc EQ 0.
*      ls_styles_mapping-style = sy-tabix.
*    ELSE.
*      APPEND ls_cellxfs TO lt_cellxfs.
*      DESCRIBE TABLE lt_cellxfs LINES ls_styles_mapping-style.
*    ENDIF.
*    SUBTRACT 1 FROM ls_styles_mapping-style.
*    ls_styles_mapping-guid = lo_style-&gt;get_guid( ).
*    APPEND ls_styles_mapping TO me-&gt;styles_mapping.
*  ENDWHILE.
*
*  &quot; create numfmt elements
*  LOOP AT lt_numfmts INTO ls_numfmt.
*    lo_element_numfmt = lo_document-&gt;create_simple_element( name   = lc_xml_node_numfmt
*                                                            parent = lo_document ).
*    lv_value = sy-tabix + zcl_excel_common=&gt;c_excel_numfmt_offset.
*    CONDENSE lv_value.
*    lo_element_numfmt-&gt;set_attribute_ns( name  = lc_xml_attr_numfmtid
*                                      value = lv_value ).
*    lv_value = ls_numfmt-numfmt.
**    REPLACE ALL OCCURRENCES OF &apos;.&apos; IN lv_value WITH &apos;\.&apos;.
*    lo_element_numfmt-&gt;set_attribute_ns( name  = lc_xml_attr_formatcode
*                                         value = lv_value ).
*    lo_element_numfmts-&gt;append_child( new_child = lo_element_numfmt ).
*  ENDLOOP.
*
*  &quot; create font elements
*  LOOP AT lt_fonts INTO ls_font.
*    lo_element_font = lo_document-&gt;create_simple_element( name   = lc_xml_node_font
*                                                          parent = lo_document ).
*    IF ls_font-bold EQ abap_true.
*      lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_b
*                                                           parent = lo_document ).
*      lo_element_font-&gt;append_child( new_child = lo_sub_element ).
*    ENDIF.
*    IF ls_font-italic EQ abap_true.
*      lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_i
*                                                           parent = lo_document ).
*      lo_element_font-&gt;append_child( new_child = lo_sub_element ).
*    ENDIF.
*    IF ls_font-underline EQ abap_true.
*      lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_u
*                                                           parent = lo_document ).
*      lv_value = ls_font-underline_mode.
*      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_val
*                                        value = lv_value ).
*      lo_element_font-&gt;append_child( new_child = lo_sub_element ).
*    ENDIF.
*    IF ls_font-strikethrough EQ abap_true.
*      lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_strike
*                                                           parent = lo_document ).
*      lo_element_font-&gt;append_child( new_child = lo_sub_element ).
*    ENDIF.
*    &quot;size
*    lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_sz
*                                                         parent = lo_document ).
*    lv_value = ls_font-size.
*    SHIFT lv_value RIGHT DELETING TRAILING space.
*    SHIFT lv_value LEFT DELETING LEADING space.
*    lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_val
*                                      value = lv_value ).
*    lo_element_font-&gt;append_child( new_child = lo_sub_element ).
*    &quot;color
*    create_xl_styles_color_node(
*        io_document        = lo_document
*        io_parent          = lo_element_font
*        is_color           = ls_font-color ).
*
*    &quot;name
*    lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_name
*                                                         parent = lo_document ).
*    lv_value = ls_font-name.
*    lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_val
*                                      value = lv_value ).
*    lo_element_font-&gt;append_child( new_child = lo_sub_element ).
*    &quot;family
*    lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_family
*                                                         parent = lo_document ).
*    lv_value = ls_font-family.
*    SHIFT lv_value RIGHT DELETING TRAILING space.
*    SHIFT lv_value LEFT DELETING LEADING space.
*    lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_val
*                                      value = lv_value ).
*    lo_element_font-&gt;append_child( new_child = lo_sub_element ).
*    &quot;scheme
*    IF ls_font-scheme IS NOT INITIAL.
*      lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_scheme
*                                                           parent = lo_document ).
*      lv_value = ls_font-scheme.
*      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_val
*                                        value = lv_value ).
*      lo_element_font-&gt;append_child( new_child = lo_sub_element ).
*    ENDIF.
*    lo_element_fonts-&gt;append_child( new_child = lo_element_font ).
*  ENDLOOP.
*
*  &quot; create fill elements
*  LOOP AT lt_fills INTO ls_fill.
*    lo_element_fill = lo_document-&gt;create_simple_element( name   = lc_xml_node_fill
*                                                          parent = lo_document ).
*    &quot;pattern
*    lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_patternfill
*                                                         parent = lo_document ).
*    lv_value = ls_fill-filltype.
*    lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_patterntype
*                                      value = lv_value ).
*    &quot; fgcolor
*    create_xl_styles_color_node(
*        io_document        = lo_document
*        io_parent          = lo_sub_element
*        is_color           = ls_fill-fgcolor
*        iv_color_elem_name = lc_xml_node_fgcolor ).
*
*    &quot; bgcolor
*    create_xl_styles_color_node(
*        io_document        = lo_document
*        io_parent          = lo_sub_element
*        is_color           = ls_fill-bgcolor
*        iv_color_elem_name = lc_xml_node_bgcolor ).
*
*    lo_element_fill-&gt;append_child( new_child = lo_sub_element ).&quot;pattern
*    lo_element_fills-&gt;append_child( new_child = lo_element_fill ).
*  ENDLOOP.
*
*  &quot; create border elements
*  LOOP AT lt_borders INTO ls_border.
*    lo_element_border = lo_document-&gt;create_simple_element( name   = lc_xml_node_border
*                                                            parent = lo_document ).
*
*    IF ls_border-diagonalup IS NOT INITIAL.
*      lv_value = ls_border-diagonalup.
*      CONDENSE lv_value.
*      lo_element_border-&gt;set_attribute_ns( name  = lc_xml_attr_diagonalup
*                                        value = lv_value ).
*    ENDIF.
*
*    IF ls_border-diagonaldown IS NOT INITIAL.
*      lv_value = ls_border-diagonaldown.
*      CONDENSE lv_value.
*      lo_element_border-&gt;set_attribute_ns( name  = lc_xml_attr_diagonaldown
*                                        value = lv_value ).
*    ENDIF.
*
*    &quot;left
*    lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_left
*                                                         parent = lo_document ).
*    IF ls_border-left_style IS NOT INITIAL.
*      lv_value = ls_border-left_style.
*      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_style
*                                        value = lv_value ).
*    ENDIF.
*
*    create_xl_styles_color_node(
*        io_document        = lo_document
*        io_parent          = lo_sub_element
*        is_color           = ls_border-left_color ).
*
*    lo_element_border-&gt;append_child( new_child = lo_sub_element ).
*
*    &quot;right
*    lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_right
*                                                         parent = lo_document ).
*    IF ls_border-right_style IS NOT INITIAL.
*      lv_value = ls_border-right_style.
*      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_style
*                                        value = lv_value ).
*    ENDIF.
*
*    create_xl_styles_color_node(
*        io_document        = lo_document
*        io_parent          = lo_sub_element
*        is_color           = ls_border-right_color ).
*
*    lo_element_border-&gt;append_child( new_child = lo_sub_element ).
*
*    &quot;top
*    lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_top
*                                                         parent = lo_document ).
*    IF ls_border-top_style IS NOT INITIAL.
*      lv_value = ls_border-top_style.
*      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_style
*                                        value = lv_value ).
*    ENDIF.
*
*    create_xl_styles_color_node(
*        io_document        = lo_document
*        io_parent          = lo_sub_element
*        is_color           = ls_border-top_color ).
*
*    lo_element_border-&gt;append_child( new_child = lo_sub_element ).
*
*    &quot;bottom
*    lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_bottom
*                                                         parent = lo_document ).
*    IF ls_border-bottom_style IS NOT INITIAL.
*      lv_value = ls_border-bottom_style.
*      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_style
*                                        value = lv_value ).
*    ENDIF.
*
*    create_xl_styles_color_node(
*        io_document        = lo_document
*        io_parent          = lo_sub_element
*        is_color           = ls_border-bottom_color ).
*
*    lo_element_border-&gt;append_child( new_child = lo_sub_element ).
*
*    &quot;diagonal
*    lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_diagonal
*                                                         parent = lo_document ).
*    IF ls_border-diagonal_style IS NOT INITIAL.
*      lv_value = ls_border-diagonal_style.
*      lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_style
*                                        value = lv_value ).
*    ENDIF.
*
*    create_xl_styles_color_node(
*        io_document        = lo_document
*        io_parent          = lo_sub_element
*        is_color           = ls_border-diagonal_color ).
*
*    lo_element_border-&gt;append_child( new_child = lo_sub_element ).
*    lo_element_borders-&gt;append_child( new_child = lo_element_border ).
*  ENDLOOP.
*
*  &quot; update attribute &quot;count&quot;
*  DESCRIBE TABLE lt_fonts LINES lv_fonts_count.
*  MOVE lv_fonts_count TO lv_value.
*  SHIFT lv_value RIGHT DELETING TRAILING space.
*  SHIFT lv_value LEFT DELETING LEADING space.
*  lo_element_fonts-&gt;set_attribute_ns( name  = lc_xml_attr_count
*                                      value = lv_value ).
*  DESCRIBE TABLE lt_fills LINES lv_fills_count.
*  MOVE lv_fills_count TO lv_value.
*  SHIFT lv_value RIGHT DELETING TRAILING space.
*  SHIFT lv_value LEFT DELETING LEADING space.
*  lo_element_fills-&gt;set_attribute_ns( name  = lc_xml_attr_count
*                                      value = lv_value ).
*  DESCRIBE TABLE lt_borders LINES lv_borders_count.
*  MOVE lv_borders_count TO lv_value.
*  SHIFT lv_value RIGHT DELETING TRAILING space.
*  SHIFT lv_value LEFT DELETING LEADING space.
*  lo_element_borders-&gt;set_attribute_ns( name  = lc_xml_attr_count
*                                        value = lv_value ).
*  DESCRIBE TABLE lt_cellxfs LINES lv_cellxfs_count.
*  MOVE lv_cellxfs_count TO lv_value.
*  SHIFT lv_value RIGHT DELETING TRAILING space.
*  SHIFT lv_value LEFT DELETING LEADING space.
*  lo_element_cellxfs-&gt;set_attribute_ns( name  = lc_xml_attr_count
*                                        value = lv_value ).
*
*  &quot; Append to root node
*  lo_element_root-&gt;append_child( new_child = lo_element_numfmts ).
*  lo_element_root-&gt;append_child( new_child = lo_element_fonts ).
*  lo_element_root-&gt;append_child( new_child = lo_element_fills ).
*  lo_element_root-&gt;append_child( new_child = lo_element_borders ).
*
*  &quot; cellstylexfs node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_cellstylexfs
*                                                   parent = lo_document ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_count
*                                value = &apos;1&apos; ).
*  lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_xf
*                                                       parent = lo_document ).
*
*  lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_numfmtid
*                                    value = c_off ).
*  lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_fontid
*                                    value = c_off ).
*  lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_fillid
*                                    value = c_off ).
*  lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_borderid
*                                    value = c_off ).
*
*  lo_element-&gt;append_child( new_child = lo_sub_element ).
*  lo_element_root-&gt;append_child( new_child = lo_element ).
*
*  LOOP AT lt_cellxfs INTO ls_cellxfs.
*    lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_xf
*                                                        parent = lo_document ).
*    MOVE ls_cellxfs-numfmtid TO lv_value.
*    SHIFT lv_value RIGHT DELETING TRAILING space.
*    SHIFT lv_value LEFT DELETING LEADING space.
*    lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_numfmtid
*                                  value = lv_value ).
*    MOVE ls_cellxfs-fontid TO lv_value.
*    SHIFT lv_value RIGHT DELETING TRAILING space.
*    SHIFT lv_value LEFT DELETING LEADING space.
*    lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_fontid
*                                  value = lv_value ).
*    MOVE ls_cellxfs-fillid TO lv_value.
*    SHIFT lv_value RIGHT DELETING TRAILING space.
*    SHIFT lv_value LEFT DELETING LEADING space.
*    lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_fillid
*                                  value = lv_value ).
*    MOVE ls_cellxfs-borderid TO lv_value.
*    SHIFT lv_value RIGHT DELETING TRAILING space.
*    SHIFT lv_value LEFT DELETING LEADING space.
*    lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_borderid
*                                  value = lv_value ).
*    MOVE ls_cellxfs-xfid TO lv_value.
*    SHIFT lv_value RIGHT DELETING TRAILING space.
*    SHIFT lv_value LEFT DELETING LEADING space.
*    lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_xfid
*                                  value = lv_value ).
*    IF ls_cellxfs-applynumberformat EQ 1.
*      MOVE ls_cellxfs-applynumberformat TO lv_value.
*      SHIFT lv_value RIGHT DELETING TRAILING space.
*      SHIFT lv_value LEFT DELETING LEADING space.
*      lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_applynumberformat
*                                    value = lv_value ).
*    ENDIF.
*    IF ls_cellxfs-applyfont EQ 1.
*      MOVE ls_cellxfs-applyfont TO lv_value.
*      SHIFT lv_value RIGHT DELETING TRAILING space.
*      SHIFT lv_value LEFT DELETING LEADING space.
*      lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_applyfont
*                                    value = lv_value ).
*    ENDIF.
*    IF ls_cellxfs-applyfill EQ 1.
*      MOVE ls_cellxfs-applyfill TO lv_value.
*      SHIFT lv_value RIGHT DELETING TRAILING space.
*      SHIFT lv_value LEFT DELETING LEADING space.
*      lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_applyfill
*                                    value = lv_value ).
*    ENDIF.
*    IF ls_cellxfs-applyborder EQ 1.
*      MOVE ls_cellxfs-applyborder TO lv_value.
*      SHIFT lv_value RIGHT DELETING TRAILING space.
*      SHIFT lv_value LEFT DELETING LEADING space.
*      lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_applyborder
*                                    value = lv_value ).
*    ENDIF.
*    IF ls_cellxfs-applyalignment EQ 1. &quot; depends on each style not for all the sheet
*      MOVE ls_cellxfs-applyalignment TO lv_value.
*      SHIFT lv_value RIGHT DELETING TRAILING space.
*      SHIFT lv_value LEFT DELETING LEADING space.
*      lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_applyalignment
*                                    value = lv_value ).
*      lo_sub_element_2 = lo_document-&gt;create_simple_element( name   = lc_xml_node_alignment
*                                                             parent = lo_document ).
*      ADD 1 TO ls_cellxfs-alignmentid. &quot;Table index starts from 1
*      READ TABLE lt_alignments INTO ls_alignment INDEX ls_cellxfs-alignmentid.
*      SUBTRACT 1 FROM ls_cellxfs-alignmentid.
*      IF ls_alignment-horizontal IS NOT INITIAL.
*        MOVE ls_alignment-horizontal TO lv_value.
*        lo_sub_element_2-&gt;set_attribute_ns( name  = lc_xml_attr_horizontal
*                                            value = lv_value ).
*      ENDIF.
*      IF ls_alignment-vertical IS NOT INITIAL.
*        MOVE ls_alignment-vertical TO lv_value.
*        lo_sub_element_2-&gt;set_attribute_ns( name  = lc_xml_attr_vertical
*                                            value = lv_value ).
*      ENDIF.
*      IF ls_alignment-wraptext EQ abap_true.
*        lo_sub_element_2-&gt;set_attribute_ns( name  = lc_xml_attr_wraptext
*                                            value = c_on ).
*      ENDIF.
*      IF ls_alignment-textrotation IS NOT INITIAL.
*        MOVE ls_alignment-textrotation TO lv_value.
*        SHIFT lv_value RIGHT DELETING TRAILING space.
*        SHIFT lv_value LEFT DELETING LEADING space.
*        lo_sub_element_2-&gt;set_attribute_ns( name  = lc_xml_attr_textrotation
*                                            value = lv_value ).
*      ENDIF.
*      IF ls_alignment-shrinktofit EQ abap_true.
*        lo_sub_element_2-&gt;set_attribute_ns( name  = lc_xml_attr_shrinktofit
*                                            value = c_on ).
*      ENDIF.
*      IF ls_alignment-indent IS NOT INITIAL.
*        MOVE ls_alignment-indent TO lv_value.
*        SHIFT lv_value RIGHT DELETING TRAILING space.
*        SHIFT lv_value LEFT DELETING LEADING space.
*        lo_sub_element_2-&gt;set_attribute_ns( name  = lc_xml_attr_indent
*                                            value = lv_value ).
*      ENDIF.
*
*      lo_element-&gt;append_child( new_child = lo_sub_element_2 ).
*    ENDIF.
*    IF ls_cellxfs-applyprotection EQ 1.
*      MOVE ls_cellxfs-applyprotection TO lv_value.
*      CONDENSE lv_value NO-GAPS.
*      lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_applyprotection
*                                    value = lv_value ).
*      lo_sub_element_2 = lo_document-&gt;create_simple_element( name   = lc_xml_node_protection
*                                                             parent = lo_document ).
*      ADD 1 TO ls_cellxfs-protectionid. &quot;Table index starts from 1
*      READ TABLE lt_protections INTO ls_protection INDEX ls_cellxfs-protectionid.
*      SUBTRACT 1 FROM ls_cellxfs-protectionid.
*      IF ls_protection-locked IS NOT INITIAL.
*        MOVE ls_protection-locked TO lv_value.
*        CONDENSE lv_value.
*        lo_sub_element_2-&gt;set_attribute_ns( name  = lc_xml_attr_locked
*                                            value = lv_value ).
*      ENDIF.
*      IF ls_protection-hidden IS NOT INITIAL.
*        MOVE ls_protection-hidden TO lv_value.
*        CONDENSE lv_value.
*        lo_sub_element_2-&gt;set_attribute_ns( name  = lc_xml_attr_hidden
*                                            value = lv_value ).
*      ENDIF.
*      lo_element-&gt;append_child( new_child = lo_sub_element_2 ).
*    ENDIF.
*    lo_element_cellxfs-&gt;append_child( new_child = lo_element ).
*  ENDLOOP.
*
*  lo_element_root-&gt;append_child( new_child = lo_element_cellxfs ).
*
*  &quot; cellStyles node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_cellstyles
*                                                   parent = lo_document ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_count
*                                value = &apos;1&apos; ).
*  lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_cellstyle
*                                                       parent = lo_document ).
*
*  lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_name
*                                    value = &apos;Normal&apos; ).
*  lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_xfid
*                                    value = c_off ).
*  lo_sub_element-&gt;set_attribute_ns( name  = lc_xml_attr_builtinid
*                                    value = c_off ).
*
*  lo_element-&gt;append_child( new_child = lo_sub_element ).
*  lo_element_root-&gt;append_child( new_child = lo_element ).
*
*  &quot; dxfs node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_dxfs
*                                                   parent = lo_document ).
*
*  lo_iterator = me-&gt;excel-&gt;get_worksheets_iterator( ).
*  &quot; get sheets
*  WHILE lo_iterator-&gt;if_object_collection_iterator~has_next( ) EQ abap_true.
*    lo_worksheet ?= lo_iterator-&gt;if_object_collection_iterator~get_next( ).
*    &quot; Conditional formatting styles into exch sheet
*    lo_iterator2 = lo_worksheet-&gt;get_cond_styles_iterator( ).
*    WHILE lo_iterator2-&gt;if_object_collection_iterator~has_next( ) EQ abap_true.
*      lo_style_conditional ?= lo_iterator2-&gt;if_object_collection_iterator~get_next( ).
*      CASE lo_style_conditional-&gt;rule.
*        WHEN zcl_excel_style_conditional=&gt;c_rule_cellis.
*          &quot;if style defined
*          ls_cellis = lo_style_conditional-&gt;mode_cellis.
*          IF ls_cellis-cell_style IS INITIAL.
*            CONTINUE.
*          ENDIF.
*          READ TABLE me-&gt;styles_mapping INTO ls_styles_mapping WITH KEY guid = ls_cellis-cell_style.
*          ADD 1 TO ls_styles_mapping-style. &quot; the numbering starts from 0
*          READ TABLE lt_cellxfs INTO ls_cellxfs INDEX ls_styles_mapping-style.
*          ADD 1 TO ls_cellxfs-fillid.       &quot; the numbering starts from 0
*
*          &quot; Style already mapped?
*          READ TABLE me-&gt;styles_cond_mapping INTO ls_style_cond_mapping WITH KEY style = ls_styles_mapping-style.
*          IF sy-subrc EQ 0.
*            ls_style_cond_mapping-guid  = ls_cellis-cell_style.
*            APPEND ls_style_cond_mapping TO me-&gt;styles_cond_mapping.
*          ELSE.
*            ls_style_cond_mapping-guid  = ls_cellis-cell_style.
*            ls_style_cond_mapping-style = ls_styles_mapping-style.
*            ls_style_cond_mapping-dxf   = lv_dfx_count.
*            APPEND ls_style_cond_mapping TO me-&gt;styles_cond_mapping.
*            ADD 1 TO lv_dfx_count.
*
*            &quot; dxf node
*            lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_dxf
*                                                                 parent = lo_document ).
*
*            READ TABLE lt_fills INTO ls_fill INDEX ls_cellxfs-fillid.
*            IF ls_fill IS NOT INITIAL.
*              &quot; fill properties
*              lo_element_fill = lo_document-&gt;create_simple_element( name   = lc_xml_node_fill
*                                                                       parent = lo_document ).
*              &quot;pattern
*              lo_sub_element_2 = lo_document-&gt;create_simple_element( name   = lc_xml_node_patternfill
*                                                                   parent = lo_document ).
*              lv_value = ls_fill-filltype.
*              lo_sub_element_2-&gt;set_attribute_ns( name  = lc_xml_attr_patterntype
*                                                  value = lv_value ).
*              &quot; fgcolor
*              create_xl_styles_color_node(
*                  io_document        = lo_document
*                  io_parent          = lo_sub_element_2
*                  is_color           = ls_fill-fgcolor
*                  iv_color_elem_name = lc_xml_node_fgcolor ).
*
*              &quot; bgcolor
*              create_xl_styles_color_node(
*                  io_document        = lo_document
*                  io_parent          = lo_sub_element_2
*                  is_color           = ls_fill-bgcolor
*                  iv_color_elem_name = lc_xml_node_bgcolor ).
*
*              lo_element_fill-&gt;append_child( new_child = lo_sub_element_2 ). &quot;pattern
*
*              lo_sub_element-&gt;append_child( new_child = lo_element_fill ).
*            ENDIF.
*          ENDIF.
*
*          lo_element-&gt;append_child( new_child = lo_sub_element ).
*        WHEN zcl_excel_style_conditional=&gt;c_rule_expression.
*          &quot;if style defined
*          ls_expression = lo_style_conditional-&gt;mode_expression.
*          IF ls_expression-cell_style IS INITIAL.
*            CONTINUE.
*          ENDIF.
*          READ TABLE me-&gt;styles_mapping INTO ls_styles_mapping WITH KEY guid = ls_expression-cell_style.
*          ADD 1 TO ls_styles_mapping-style. &quot; the numbering starts from 0
*          READ TABLE lt_cellxfs INTO ls_cellxfs INDEX ls_styles_mapping-style.
*          ADD 1 TO ls_cellxfs-fillid.       &quot; the numbering starts from 0
*
*          READ TABLE me-&gt;styles_cond_mapping INTO ls_style_cond_mapping WITH KEY style = ls_styles_mapping-style.
*          IF sy-subrc EQ 0.
*            ls_style_cond_mapping-guid  = ls_expression-cell_style.
*            APPEND ls_style_cond_mapping TO me-&gt;styles_cond_mapping.
*          ELSE.
*            ls_style_cond_mapping-guid  = ls_expression-cell_style.
*            ls_style_cond_mapping-style = ls_styles_mapping-style.
*            ls_style_cond_mapping-dxf   = lv_dfx_count.
*            APPEND ls_style_cond_mapping TO me-&gt;styles_cond_mapping.
*            ADD 1 TO lv_dfx_count.
*
*            &quot; dxf node
*            lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_dxf
*                                                                 parent = lo_document ).
*
*            READ TABLE lt_fills INTO ls_fill INDEX ls_cellxfs-fillid.
*            IF ls_fill IS NOT INITIAL.
*              &quot; fill properties
*              lo_element_fill = lo_document-&gt;create_simple_element( name   = lc_xml_node_fill
*                                                                       parent = lo_document ).
*              &quot;pattern
*              lo_sub_element_2 = lo_document-&gt;create_simple_element( name   = lc_xml_node_patternfill
*                                                                   parent = lo_document ).
*              lv_value = ls_fill-filltype.
*              lo_sub_element_2-&gt;set_attribute_ns( name  = lc_xml_attr_patterntype
*                                                  value = lv_value ).
*              &quot; fgcolor
*              create_xl_styles_color_node(
*                  io_document        = lo_document
*                  io_parent          = lo_sub_element_2
*                  is_color           = ls_fill-fgcolor
*                  iv_color_elem_name = lc_xml_node_fgcolor ).
*
*              &quot; bgcolor
*              create_xl_styles_color_node(
*                  io_document        = lo_document
*                  io_parent          = lo_sub_element_2
*                  is_color           = ls_fill-bgcolor
*                  iv_color_elem_name = lc_xml_node_bgcolor ).
*
*              lo_element_fill-&gt;append_child( new_child = lo_sub_element_2 ). &quot;pattern
*
*              lo_sub_element-&gt;append_child( new_child = lo_element_fill ).
*            ENDIF.
*          ENDIF.
*
*          lo_element-&gt;append_child( new_child = lo_sub_element ).
*        WHEN OTHERS.
*          CONTINUE.
*      ENDCASE.
*    ENDWHILE.
*  ENDWHILE.
*
*  lv_value = lv_dfx_count.
*  CONDENSE lv_value.
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_count
*                                value = lv_value ).
*  lo_element_root-&gt;append_child( new_child = lo_element ).
*
*  &quot; tableStyles node
*  lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_tablestyles
*                                                   parent = lo_document ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_count
*                                value = &apos;0&apos; ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_defaulttablestyle
*                                value = zcl_excel_table=&gt;builtinstyle_medium9 ).
*  lo_element-&gt;set_attribute_ns( name  = lc_xml_attr_defaultpivotstyle
*                                value = zcl_excel_table=&gt;builtinstyle_pivot_light16 ).
*  lo_element_root-&gt;append_child( new_child = lo_element ).
*
*  &quot;write legacy color palette in case any indexed color was changed
*  IF excel-&gt;legacy_palette-&gt;is_modified( ) = abap_true.
*    lo_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_colors
*                                                   parent   = lo_document ).
*    lo_sub_element = lo_document-&gt;create_simple_element( name   = lc_xml_node_indexedcolors
*                                                       parent   = lo_document ).
*    lo_element-&gt;append_child( new_child = lo_sub_element ).
*
*    lt_colors = excel-&gt;legacy_palette-&gt;get_colors( ).
*    LOOP AT lt_colors INTO ls_color.
*      lo_sub_element_2 = lo_document-&gt;create_simple_element( name   = lc_xml_node_rgbcolor
*                                                             parent = lo_document ).
*      lv_value = ls_color.
*      lo_sub_element_2-&gt;set_attribute_ns( name  = lc_xml_attr_rgb
*                                          value = lv_value ).
*      lo_sub_element-&gt;append_child( new_child = lo_sub_element_2 ).
*    ENDLOOP.
*
*    lo_element_root-&gt;append_child( new_child = lo_element ).
*  ENDIF.
*
***********************************************************************
** STEP 5: Create xstring stream
*  lo_streamfactory = lo_ixml-&gt;create_stream_factory( ).
*  lo_ostream = lo_streamfactory-&gt;create_ostream_xstring( string = ep_content ).
*  lo_renderer = lo_ixml-&gt;create_renderer( ostream  = lo_ostream document = lo_document ).
*  lo_renderer-&gt;render( ).

endmethod.</source>
 </method>
 <method CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_STYLESWITHEFFECTS" VERSION="1" LANGU="E" DESCRIPT="Create &apos;word/stylesWithEffects.xml&apos;" EXPOSURE="1" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_STYLESWITHEFFECTS" SCONAME="EP_CONTENT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
  <source>method CREATE_WORD_STYLESWITHEFFECTS.

endmethod.</source>
 </method>
 <method CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_THEME" VERSION="1" LANGU="E" DESCRIPT="Create &apos;word/theme/theme1.xml&apos;" EXPOSURE="1" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_THEME" SCONAME="EP_CONTENT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
  <source>method CREATE_WORD_THEME.

endmethod.</source>
 </method>
 <method CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_WEBSETTINGS" VERSION="1" LANGU="E" DESCRIPT="Create &apos;word/webSettings.xml&apos;" EXPOSURE="1" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_WORD_WRITER" CMPNAME="CREATE_WORD_WEBSETTINGS" SCONAME="EP_CONTENT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
  <source>method CREATE_WORD_WEBSETTINGS.

endmethod.</source>
 </method>
</CLAS>
